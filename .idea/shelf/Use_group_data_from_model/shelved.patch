Index: src/components/editor/predicateSelect.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/editor/predicateSelect.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/editor/predicateSelect.ts	
@@ -2,7 +2,7 @@
 import IFormController = angular.IFormController;
 import IScope = angular.IScope;
 import { SearchPredicateModal } from './searchPredicateModal';
-import { EditableForm } from '../form/editableController';
+import { EditableForm } from '../form/editableEntityController';
 import { Model, Type } from '../../services/entities';
 
 export const mod = angular.module('iow.components.editor');
Index: src/components/form/editableController.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/form/editableController.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/form/editableEntityController.ts	
@@ -1,14 +1,13 @@
-import _ = require('lodash');
-import IPromise = angular.IPromise;
-import IScope = angular.IScope;
 import IFormController = angular.IFormController;
 import ILogService = angular.ILogService;
-import { UserService } from "../../services/userService";
-import { ModelController } from "../model/modelController";
-import { Class, Predicate, Model } from "../../services/entities";
-import { ConfirmationModal } from "../common/confirmationModal";
-import {GroupListItem} from "../../services/entities";
-import {Group} from "../../services/entities";
+import IPromise = angular.IPromise;
+import IScope = angular.IScope;
+import * as _ from 'lodash';
+import { clone } from '../../services/utils';
+import { UserService } from '../../services/userService';
+import { ModelController } from '../model/modelController';
+import { ConfirmationModal } from '../common/confirmationModal';
+import { Class, Group, GroupListItem, Model, Predicate, Uri } from '../../services/entities';
 
 export interface EditableForm extends IFormController {
   editing: boolean;
@@ -24,7 +23,7 @@
   remove(): boolean;
 }
 
-export abstract class EditableController<T extends Class|Predicate|Model|Group> {
+export abstract class EditableEntityController<T extends Class|Predicate|Model|Group> {
 
   submitError = false;
   editableInEdit: T;
@@ -41,23 +40,16 @@
   }
 
   abstract create(entity: T): IPromise<any>;
-  abstract update(entity: T, oldId: string): IPromise<any>;
+  abstract update(entity: T, oldId: Uri): IPromise<any>;
   abstract remove(entity: T): IPromise<any>;
   abstract rights(): Rights;
   abstract getEditable(): T;
   abstract setEditable(editable: T): void;
 
   select(editable: T) {
-    function clone<T>(obj: T): T {
-      if (obj) {
-        const cloned = Object.create(Object.getPrototypeOf(obj));
-        _.merge(cloned, obj);
-        return cloned;
-      }
-    }
     this.submitError = false;
     this.setEditable(editable);
-    this.editableInEdit = clone(editable);
+    this.editableInEdit = clone<T>(editable);
 
     if (editable && editable.unsaved) {
       this.edit();
Index: src/components/form/editable.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/form/editable.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/form/editable.ts	
@@ -4,8 +4,10 @@
 import INgModelController = angular.INgModelController;
 import ILocationService = angular.ILocationService;
 import gettextCatalog = angular.gettext.gettextCatalog;
+import * as _ from 'lodash';
 import { LanguageService } from '../../services/languageService';
-import { EditableForm } from './editableController';
+import { EditableForm } from './editableEntityController';
+import { FormElementController } from "./formElementController";
 import { Localizable, isLocalizable } from '../../services/entities';
 import { isString } from '../../services/utils';
 
@@ -17,7 +19,6 @@
     scope: {
       title: '@',
       link: '=',
-      externalLink: '=',
       valueAsLocalizationKey: '@'
     },
     restrict: 'E',
@@ -26,41 +27,30 @@
     bindToController: true,
     controllerAs: 'ctrl',
     require: ['editable', '?^form'],
-    link($scope: EditableScope, element: JQuery, attributes: IAttributes, controllers: any[]) {
-      $scope.formController = controllers[1];
-      controllers[0].ngModel = element.find('[ng-model]').controller('ngModel');
+    link($scope: IScope, element: JQuery, attributes: IAttributes, controllers: any[]) {
+      const editableController = controllers[0];
+      editableController.ngModelController = element.find('[ng-model]').controller('ngModel');
+      editableController.isEditing = () => controllers[1].editing;
     },
     controller: EditableController
   }
 });
 
-interface EditableScope extends IScope {
-  formController: EditableForm;
-}
 
-class EditableController {
+class EditableController extends FormElementController {
 
-  ngModel: INgModelController;
-  title: string;
-  link: string;
-  externalLink: string;
-  valueAsLocalizationKey: boolean;
+  isEditing: () => boolean;
+  ngModelController: INgModelController;
 
-  /* @ngInject */
-  constructor(private $location: ILocationService, private languageService: LanguageService, private gettextCatalog: gettextCatalog) {
+  constructor($location: ILocationService, languageService: LanguageService, gettextCatalog: gettextCatalog) {
+    super($location, languageService, gettextCatalog);
   }
 
-  isDifferentUrl(url: string): boolean {
-    return this.$location.url().replace(/:/g, '%3A') !== url;
+  showNonEditable() {
+    return this.isEditing && !this.isEditing();
   }
 
-  displayValue(): string {
-    const value: Localizable|string = this.ngModel && this.ngModel.$modelValue;
-
-    if (isLocalizable(value)) {
-      return this.languageService.translate(value);
-    } else if (isString(value)) {
-      return value && this.valueAsLocalizationKey ? this.gettextCatalog.getString(value) : value;
-    }
+  getValue() {
+    return this.ngModelController && this.ngModelController.$modelValue;
   }
 }
Index: src/components/form/nonEditable.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/form/nonEditable.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/form/nonEditable.ts	
@@ -3,6 +3,7 @@
 import { Localizable, isLocalizable } from '../../services/entities';
 import { isString } from '../../services/utils';
 import { LanguageService } from '../../services/languageService';
+import { FormElementController } from "./formElementController";
 
 export const mod = angular.module('iow.components.form');
 
@@ -13,47 +14,30 @@
       title: '@',
       value: '=',
       link: '=',
-      externalLink: '=',
       valueAsLocalizationKey: '@'
     },
     restrict: 'E',
-    template: `<div ng-show="ctrl.value">
-                 <div class="model-view__title">{{ctrl.title | translate}}</div>
-                 <a ng-if="ctrl.link && ctrl.isDifferentUrl(ctrl.link)" ng-href="{{'#' + ctrl.link}}">{{ctrl.displayValue()}}</a>
-                 <a ng-if="ctrl.externalLink" ng-href="{{ctrl.externalLink}}" target="_blank">{{ctrl.displayValue()}}</a>
-                 <div ng-if="(!ctrl.link || !ctrl.isDifferentUrl(ctrl.link)) && !ctrl.externalLink">{{ctrl.displayValue()}}</div>
-               </div>`,
+    template: require('./nonEditable.html'),
     bindToController: true,
     controllerAs: 'ctrl',
     controller: NonEditableController
   };
 });
 
-// TODO copy paste with editable
-// TODO proper view model
-class NonEditableController {
+class NonEditableController extends FormElementController {
 
-  title: string;
-  value: Localizable|string;
-  link: string;
-  externalLink: string;
-  valueAsLocalizationKey: boolean;
+  value: string|Localizable;
 
   /* @ngInject */
-  constructor(private $location: ILocationService, private languageService: LanguageService, private gettextCatalog: gettextCatalog) {
+  constructor($location: ILocationService, languageService: LanguageService, gettextCatalog: gettextCatalog) {
+    super($location, languageService, gettextCatalog);
   }
 
-  isDifferentUrl(url: string): boolean {
-    return this.$location.url().replace(/:/g, '%3A') !== url;
+  showNonEditable() {
+    return true;
   }
 
-  displayValue(): string {
-    const value = this.value;
-
-    if (isLocalizable(value)) {
-      return this.languageService.translate(value);
-    } else if (isString(value)) {
-      return value && this.valueAsLocalizationKey ? this.gettextCatalog.getString(value) : value;
+  getValue(): string|Localizable {
+    return this.value;
-    }
+  }
-  };
 }
Index: src/components/editor/propertyView.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/editor/propertyView.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/editor/propertyView.ts	
@@ -75,10 +75,6 @@
     return this.model.linkToCurie('class', this.property.valueClass, this.modelCache);
   }
 
-  linkToExternalValueClass() {
-    return this.model.linkToExternalCurie(this.property.valueClass, this.modelCache);
-  }
-
   openAndScrollTo() {
     this.isOpen = true;
     this.scroll();
Index: src/components/form/editable.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/form/editable.html	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/form/editable.html	
@@ -1,10 +1,7 @@
 <div class="editable-wrap">
-  <div ng-show="ctrl.displayValue() || formController.editing" class="model-view__title">{{ctrl.title | translate}}</div>
-  <div ng-show="formController.editing">
-    <ng-transclude></ng-transclude>
-  </div>
+  <div ng-show="ctrl.value || ctrl.isEditing()" class="model-view__title">{{ctrl.title | translate}}</div>
+  <div ng-show="ctrl.isEditing()" ng-transclude></div>
 
-  <a ng-if="!formController.editing && ctrl.link && ctrl.isDifferentUrl(ctrl.link)" ng-href="{{'#' + ctrl.link}}">{{ctrl.displayValue()}}</a>
-  <a ng-if="!formController.editing && ctrl.externalLink" ng-href="{{ctrl.externalLink}}" target="_blank">{{ctrl.displayValue()}}</a>
-  <span ng-if="!formController.editing && (!ctrl.link || !ctrl.isDifferentUrl(ctrl.link)) && !ctrl.externalLink" >{{ctrl.displayValue()}}</span>
+  <a ng-show="ctrl.showLink" ng-href="{{ctrl.target}}">{{ctrl.displayValue}}</a>
+  <span ng-show="ctrl.showPlain" >{{ctrl.displayValue}}</span>
 </div>
Index: src/components/editor/predicateView.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/editor/predicateView.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/editor/predicateView.ts	
@@ -3,7 +3,7 @@
 import IScope = angular.IScope;
 import { PredicateService } from '../../services/predicateService';
 import { UserService } from '../../services/userService';
-import { EditableController, EditableScope, Rights } from '../form/editableController';
+import { EditableEntityController, EditableScope, Rights } from '../form/editableEntityController';
 import { Predicate, Model, Uri } from '../../services/entities';
 import { ConfirmationModal } from '../common/confirmationModal';
 
@@ -29,7 +29,7 @@
   };
 });
 
-class PredicateViewController extends EditableController<Predicate> {
+class PredicateViewController extends EditableEntityController<Predicate> {
 
   predicate: Predicate;
   model: Model;
Index: src/components/editor/propertyView.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/editor/propertyView.html	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/editor/propertyView.html	
@@ -17,10 +17,7 @@
     <range-select range="ctrl.property.dataType"></range-select>
   </editable>
 
-  <editable ng-if="ctrl.predicate.isAssociation()"
-            title="Value class"
-            link="ctrl.linkToValueClass()"
-            external-link="ctrl.linkToExternalValueClass()">
+  <editable ng-if="ctrl.predicate.isAssociation()" title="Value class" link="ctrl.linkToValueClass()"
     <class-select name="Value class" curie="ctrl.property.valueClass" model="ctrl.model"></class-select>
   </editable>
 
Index: src/components/navigation/breadcrumb.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/navigation/breadcrumb.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/navigation/breadcrumb.ts	
@@ -1,5 +1,5 @@
 import IScope = angular.IScope;
-import {LocationService} from "../../services/locationService";
+import { LocationService } from '../../services/locationService';
 
 export const mod = angular.module('iow.components.navigation');
 
Index: src/components/model/searchSchemeModal.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/model/searchSchemeModal.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/model/searchSchemeModal.ts	
@@ -2,9 +2,9 @@
 import IModalService = angular.ui.bootstrap.IModalService;
 import IModalServiceInstance = angular.ui.bootstrap.IModalServiceInstance;
 import * as _ from 'lodash';
-import { ConceptService } from "../../services/conceptService";
-import { Language } from "../../services/languageService";
-import { Uri } from "../../services/entities";
+import { ConceptService } from '../../services/conceptService';
+import { Language } from '../../services/languageService';
+import { Uri } from '../../services/entities';
 
 
 export class SearchSchemeModal {
Index: src/components/form/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/form/index.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/form/index.ts	
@@ -1,15 +1,14 @@
-import { EditableController } from './editableController';
+import { EditableEntityController } from './editableEntityController';
 
 const mod = angular.module('iow.components.form', ['iow.services']);
 export = mod.name;
 
 import './editable';
-import './editableButtons';
+import './editableEntityButtons';
+import './href';
 import './idInput';
 import './localizedInput';
 import './modelLanguageChooser';
 import './nonEditable';
 import './stateSelect';
 import './valueSelect';
-
-mod.service('editableController', EditableController);
Index: src/components/navigation/login.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/navigation/login.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/navigation/login.ts	
@@ -1,8 +1,8 @@
 import IModalService = angular.ui.bootstrap.IModalService;
-import {UserService} from "../../services/userService";
-import {User} from "../../services/entities";
-import IWindowService = angular.IWindowService;
 import IModalServiceInstance = angular.ui.bootstrap.IModalServiceInstance;
+import IWindowService = angular.IWindowService;
+import { User } from '../../services/entities';
+import { UserService } from '../../services/userService';
 
 export const mod = angular.module('iow.components.navigation');
 
Index: src/components/model/modelView.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/model/modelView.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/model/modelView.ts	
@@ -3,7 +3,7 @@
 import IPromise = angular.IPromise;
 import IScope = angular.IScope;
 import IAttributes = angular.IAttributes;
-import { EditableController, EditableScope, EditableForm, Rights } from '../form/editableController';
+import { EditableEntityController, EditableScope, EditableForm, Rights } from '../form/editableEntityController';
 import { LanguageService } from '../../services/languageService';
 import { Model, Require, Reference, Uri } from '../../services/entities';
 import { ModelController } from './modelController';
@@ -38,7 +38,7 @@
   open(item: T): void;
 }
 
-export class ModelViewController extends EditableController<Model> {
+export class ModelViewController extends EditableEntityController<Model> {
 
   visible: boolean = false;
   model: Model;
Index: src/components/model/addRequireModal.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/model/addRequireModal.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/model/addRequireModal.ts	
@@ -1,9 +1,9 @@
 import IModalService = angular.ui.bootstrap.IModalService;
 import IModalServiceInstance = angular.ui.bootstrap.IModalServiceInstance;
 import IPromise = angular.IPromise;
-import { ModelService } from "../../services/modelService";
-import { Language } from "../../services/languageService";
-import { Require } from "../../services/entities";
+import { ModelService } from '../../services/modelService';
+import { Language } from '../../services/languageService';
+import { Require } from '../../services/entities';
 
 export class AddRequireModal {
   /* @ngInject */
Index: src/components/form/formElementController.ts
===================================================================
--- src/components/form/formElementController.ts	
+++ src/components/form/formElementController.ts	
@@ -0,0 +1,50 @@
+import gettextCatalog = angular.gettext.gettextCatalog;
+import ILocationService = angular.ILocationService;
+import { EditableForm } from './editableEntityController';
+import { LanguageService } from '../../services/languageService';
+import { Localizable, isLocalizable } from '../../services/entities';
+import { isString } from '../../services/utils';
+
+export abstract class FormElementController {
+
+  title: string;
+  link: string;
+  valueAsLocalizationKey: boolean;
+  formController: EditableForm;
+
+  /* @ngInject */
+  constructor(private $location: ILocationService, private languageService: LanguageService, private gettextCatalog: gettextCatalog) {
+  }
+
+  abstract getValue(): string|Localizable;
+  abstract showNonEditable(): boolean;
+
+  private isDifferentUrl(url: string): boolean {
+    return this.$location.url().replace(/:/g, '%3A') !== url;
+  }
+
+  get external(): boolean {
+    return !this.link.startsWith('#');
+  }
+
+  get showLink(): boolean {
+    return !this.showNonEditable() && this.link && this.isDifferentUrl(this.link)
+  }
+
+  get target(): string {
+    return this.external ? this.link : '#' + this.link;
+  }
+
+  get showPlain(): boolean {
+    return this.showNonEditable() && !this.showLink;
+  }
+
+  get displayValue(): string {
+    const value: Localizable|string = this.getValue();
+    if (isLocalizable(value)) {
+      return this.languageService.translate(value);
+    } else if (isString(value)) {
+      return value && this.valueAsLocalizationKey ? this.gettextCatalog.getString(value) : value;
+    }
+  }
+}
Index: src/components/editor/searchPredicateModal.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/editor/searchPredicateModal.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/editor/searchPredicateModal.ts	
@@ -7,7 +7,7 @@
 import { PredicateService} from '../../services/predicateService';
 import { SearchConceptModal, ConceptCreation } from './searchConceptModal';
 import { LanguageService } from '../../services/languageService';
-import { EditableForm } from '../form/editableController';
+import { EditableForm } from '../form/editableEntityController';
 
 export class SearchPredicateModal {
 
Index: src/components/group/groupController.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/group/groupController.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/group/groupController.ts	
@@ -3,7 +3,7 @@
 import IPromise = angular.IPromise;
 import IQService = angular.IQService;
 import * as _ from 'lodash';
-import { EditableController, EditableScope, Rights } from '../form/editableController';
+import { EditableEntityController, EditableScope, Rights } from '../form/editableEntityController';
 import { AddModelModal } from './addModelModal';
 import { ConfirmationModal } from '../common/confirmationModal';
 import { LocationService } from '../../services/locationService';
@@ -13,7 +13,7 @@
 import { Group, GroupListItem, ModelListItem, Uri} from '../../services/entities';
 
 
-export class GroupController extends EditableController<Group> {
+export class GroupController extends EditableEntityController<Group> {
 
   loading: boolean = true;
   group: Group;
Index: src/components/editor/classView.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/editor/classView.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/editor/classView.ts	
@@ -3,7 +3,7 @@
 import IPromise = angular.IPromise;
 import ILogService = angular.ILogService;
 import { ModelController } from '../model/modelController';
-import { EditableController, EditableScope, Rights } from '../form/editableController';
+import { EditableEntityController, EditableScope, Rights } from '../form/editableEntityController';
 import { ClassFormController } from './classForm';
 import { ClassService } from '../../services/classService';
 import { Class, Model, Property } from '../../services/entities';
@@ -34,7 +34,7 @@
   }
 });
 
-export class ClassViewController extends EditableController<Class> {
+export class ClassViewController extends EditableEntityController<Class> {
 
   private classForm: ClassFormController;
   class: Class;
Index: src/services/conceptService.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/services/conceptService.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/services/conceptService.ts	
@@ -2,7 +2,7 @@
 import IHttpService = angular.IHttpService;
 import IPromise = angular.IPromise;
 import IQService = angular.IQService;
-import { EntityDeserializer, Concept, ConceptSuggestion, Uri } from "./entities";
+import { EntityDeserializer, Concept, ConceptSuggestion, Uri } from './entities';
 import { Language } from './languageService';
 
 export class ConceptService {
Index: src/main.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main.d.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/main.d.ts	
@@ -1,7 +1,5 @@
 /// <reference path="../typings/tsd.d.ts" />
 
-import IControllerService = angular.IControllerService;
-
 interface Window {
   jQuery: JQueryStatic;
   encodeURIComponent: any;
Index: src/components/editor/predicateForm.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/editor/predicateForm.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/editor/predicateForm.ts	
@@ -30,21 +30,10 @@
     return this.model.linkToCurie(this.predicate.type, this.predicate.subPropertyOf, this.modelCache);
   }
 
-  linkToExternalSubProperty() {
-    return this.model.linkToExternalCurie(this.predicate.subPropertyOf, this.modelCache);
-  }
-
   linkToValueClass() {
     const predicate = this.predicate;
     if (predicate instanceof Association) {
       return this.model.linkToCurie('class', predicate.valueClass, this.modelCache);
-    }
-  }
-
-  linkToExternalValueClass() {
-    const predicate = this.predicate;
-    if (predicate instanceof Association) {
-      return this.model.linkToExternalCurie(predicate.valueClass, this.modelCache);
     }
   }
 }
Index: src/app.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/app.ts	
@@ -10,7 +10,7 @@
 import IProvideService = angular.auto.IProvideService;
 import 'core-js';
 import { UserService } from './services/userService';
-import { LanguageService } from "./services/languageService";
+import { LanguageService } from './services/languageService';
 import { FrontPageController } from './components/frontPageController';
 import { ModelController } from './components/model/modelController';
 import { GroupController } from './components/group/groupController';
Index: src/components/editor/editableSubjectSelect.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/editor/editableSubjectSelect.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/editor/editableSubjectSelect.ts	
@@ -1,6 +1,6 @@
 import IScope = angular.IScope;
 import IAttributes = angular.IAttributes;
-import { EditableForm } from '../form/editableController';
+import { EditableForm } from '../form/editableEntityController';
 import { SearchConceptModal } from './searchConceptModal';
 import { Concept, ConceptSuggestion, Reference, Type } from '../../services/entities';
 
Index: src/components/navigation/globalLanguageChooser.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/navigation/globalLanguageChooser.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/navigation/globalLanguageChooser.ts	
@@ -1,5 +1,5 @@
 import IScope = angular.IScope;
-import {LanguageService, Language} from "../../services/languageService";
+import { LanguageService, Language } from '../../services/languageService';
 
 export const mod = angular.module('iow.components.navigation');
 
Index: src/components/form/href.ts
===================================================================
--- src/components/form/href.ts	
+++ src/components/form/href.ts	
@@ -0,0 +1,21 @@
+import IAttributes = angular.IAttributes;
+import IScope = angular.IScope;
+
+export const mod = angular.module('iow.components.form');
+
+mod.directive('ngHref', () => {
+  return {
+    restrict: 'A',
+    require: '?^editable, ?^nonEditable',
+    link($scope: IScope, element: JQuery, attributes: HrefAttributes, controllers: any[]) {
+      const external = _.any(controllers, ctrl => ctrl && ctrl.external);
+      if (external) {
+        element.attr('target', '_blank');
+      }
+    }
+  }
+});
+
+interface HrefAttributes extends IAttributes {
+  external: boolean;
+}
Index: src/services/entities.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/services/entities.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/services/entities.ts	
@@ -76,19 +76,15 @@
       if (expanded) {
         const {namespace, value} = expanded;
         const id = modelCache.modelIdForNamespace(namespace);
-        if (type === 'external' && !id) {
+        if (!type || !id) {
           return namespace + value;
-        } else if (type !== 'external' && id) {
+        } else if (type && id) {
           return selectableUrl(namespace + value, type);
         }
       }
     }
   }
 
-  linkToExternalCurie(curie: Curie, modelCache: ModelCache) {
-    return this.linkToCurie('external', curie, modelCache);
-  }
-
   serialize(inline: boolean = false): any {
     const values = Object.assign(this.graph, this.serializationValues());
 
@@ -583,8 +579,9 @@
     super('concept', graph, context);
     this.id = graph['@id'];
     this.label = graph.label || graph.prefLabel;
-    this.comment = graph.comment;
+    this.comment = graph.comment || graph['rdfs:comment'];
     this.inScheme = _.map(normalizeAsArray<any>(graph.inScheme), scheme => scheme['@id'] || scheme.uri);
+    console.log(this);
   }
 }
 
@@ -710,11 +707,11 @@
 }
 
 function groupUrl(id: Uri): RelativeUrl {
-  return `/groups?urn=${encodeURIComponent(id)}`;
+  return `#/groups?urn=${encodeURIComponent(id)}`;
 }
 
 function modelUrl(id: Uri): RelativeUrl {
-  return `/models?urn=${encodeURIComponent(id)}`;
+  return `#/models?urn=${encodeURIComponent(id)}`;
 }
 
 function selectableUrl(id: Uri, type: Type): RelativeUrl {
Index: src/components/editor/classForm.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/editor/classForm.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/editor/classForm.ts	
@@ -46,10 +46,6 @@
     return this.model.linkToCurie(this.class.type, this.class.subClassOf, this.modelCache);
   }
 
-  linkToExternalSubclass() {
-    return this.model.linkToExternalCurie(this.class.subClassOf, this.modelCache);
-  }
-
   registerPropertyView(propertyId: Uri, view: PropertyViewController) {
     this.propertyViews[propertyId] = view;
   }
