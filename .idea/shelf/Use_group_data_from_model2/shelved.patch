Index: src/components/common/typeahead.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/common/typeahead.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/components/common/typeahead.ts	
@@ -58,12 +58,12 @@
         focus(element);
       }
 
-      $scope.$watch('datasets', datasets => {
+      $scope.$watch('datasets', (datasets: Dataset|Dataset[]) => {
         if (datasets) {
           if (initialized) {
             destroy();
           }
-          initialize(normalizeAsArray<Dataset>(datasets));
+          initialize(normalizeAsArray(datasets));
         }
       });
 
Index: src/services/utils.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/services/utils.ts	(revision 7e25aa5f07b2a453155b311a1086caa8db43269a)
+++ src/services/utils.ts	
@@ -18,10 +18,18 @@
   ];
 }
 
-export function normalizeAsArray<T>(obj: any): T[] {
-  return Array.isArray(obj) ? <T[]> obj : obj ? <T[]> [obj] : <T[]> [];
+export function normalizeAsArray<T>(obj: T|T[]): T[] {
+  return Array.isArray(obj) ? obj : obj ? [obj] : [];
 }
 
 export function collectIds(items: {id: Uri}[]): Set<Uri> {
   return new Set<Uri>(_.map(items, item => item.id));
+}
+
+export function clone<T>(obj: T): T {
+  if (obj) {
+    const cloned: T = Object.create(Object.getPrototypeOf(obj));
+    _.merge(cloned, obj);
+    return cloned;
+  }
 }
